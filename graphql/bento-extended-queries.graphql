type GroupCount {
    group: String
    subjects: Int
}

type SubjectInfo {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    er_status: String
    pr_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
}

type FileInfo {
    subject_id: String
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type ArmInfo {
    arm: String
    size: Int
    caseSize: Int
}

type ProgramArms {
    program: String
    caseSize: Int
    children: [ArmInfo]
}

type FileOverview {
    file_id: String
    file_name: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    program: String
    arm: String
    subject_id: String
    sample_id: String
    diagnosis: String
    program_id: String
}

type GroupList {
    group: String
    subjects: [String]
}

type IdsLists {
    subjectIds: [String]
    sampleIds: [String]
    fileIds: [String]
    fileNames: [String]
}

type NodeCounts {
    numberOfPrograms: Int
    numberOfStudies: Int
    numberOfSubjects: Int
    numberOfSamples: Int
    numberOfLabProcedures: Int
    numberOfFiles: Int
}

schema {
    query: QueryType
}

type QueryType {
    schemaVersion: String @cypher(statement: "RETURN '1.4.5'")

    "Group counts from lists of subject ids, file ids, and sample ids"

    subjectCountByProgramFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<--(s:study)<--(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN { 
            group: p.program_acronym,
            subjects: COUNT(DISTINCT ss) 
        }
    """, passThrough: true)

    subjectCountByStudyFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (s:study)
        OPTIONAL MATCH (s)<--(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN { 
            group: s.study_acronym + ': ' + s.study_short_description,
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByDiagnosesFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(DISTINCT ss.disease_subtype) AS disease_subtype_list
        UNWIND disease_subtype_list AS disease_subtypes
        OPTIONAL MATCH (ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (disease_subtypes = ss.disease_subtype)
            AND ((ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids))
            OR (f.file_name IN $file_names)
        RETURN { 
            group: disease_subtypes, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByRecurrenceScoreFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (sf:stratification_factor)
        OPTIONAL MATCH (sf)-->(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN {   
            group: sf.grouped_recurrence_score, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByTumorSizeFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (d:diagnosis)
        OPTIONAL MATCH (d)-->(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN {
            group: d.tumor_size_group, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByTumorGradeFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (d:diagnosis)
        OPTIONAL MATCH (d)-->(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN {
            group: d.tumor_grade, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByErStatusFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (d:diagnosis)
        OPTIONAL MATCH (d)-->(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN {
            group: d.er_status, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByPrStatusFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (d:diagnosis)
        OPTIONAL MATCH (d)-->(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN {
            group: d.pr_status, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByChemotherapyRegimenFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (tp:therapeutic_procedure)
        OPTIONAL MATCH (tp)-->(d:diagnosis)-->(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN {
            group: tp.chemotherapy_regimen, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByEndocrineTherapyFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
       MATCH (tp:therapeutic_procedure)
       OPTIONAL MATCH (tp)-->(d:diagnosis)-->(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN {
            group: tp.endocrine_therapy_type, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByMenopauseStatusFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (demo:demographic_data)
        OPTIONAL MATCH (demo)-->(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        RETURN {
            group: demo.menopause_status, 
            subjects: COUNT(DISTINCT ss)
        }
    """, passThrough: true)

    subjectCountByTissueTypeFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (samp:sample)
        WITH COLLECT(DISTINCT samp.tissue_type) AS tissue_type_list
        UNWIND tissue_type_list AS tissue_types
        OPTIONAL MATCH (f:file)-->(samp:sample)-->(ss:study_subject)
            WHERE (tissue_types = samp.tissue_type)
            AND ((ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names))
        RETURN {
            group: tissue_types, 
            subjects: COUNT(DISTINCT samp)
        }
    """, passThrough: true)

    subjectCountByTissueCompositionFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (samp:sample)
        WITH COLLECT(DISTINCT samp.composition) AS composition_list
        UNWIND composition_list AS compositions
        OPTIONAL MATCH (f:file)-->(samp:sample)-->(ss:study_subject)
            WHERE (compositions = samp.composition)
            AND ((ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names))
        RETURN {
            group: compositions, 
            subjects: COUNT(DISTINCT samp)
        }
    """, passThrough: true)

    subjectCountByFileAssociationFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (f:file)-->(parent)
            WHERE NOT (parent:laboratory_procedure)
        WITH COLLECT(DISTINCT head(labels(parent))) AS parents_list
        UNWIND parents_list AS parents
        MATCH (f:file)-->(parent)-->(ss:study_subject)
        WHERE (parents = head(labels(parent)))
            AND ((ss.study_subject_id IN $subject_ids)
            OR (parent.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names))
        RETURN {
            group: head(labels(parent)), 
            subjects: COUNT(DISTINCT f)
        }
    """, passThrough: true)

    subjectCountByFileTypeFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (f:file)-->(parent)
            WHERE NOT (parent:laboratory_procedure)
        WITH COLLECT(DISTINCT f.file_type) AS file_type_list
        UNWIND file_type_list AS file_types
        OPTIONAL MATCH (f:file)-->(samp:sample)-->(ss:study_subject)
            WHERE (file_types = f.file_type)
            AND ((ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names))
        RETURN {
            group: file_types, 
            subjects: COUNT(DISTINCT f)
        }
    """, passThrough: true)

    nodeCountsFromLists (subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): NodeCounts @cypher(statement: """
        OPTIONAL MATCH (p:program)<--(s:study)<--(ss:study_subject)<--(samp:sample)<--(f:file)-->(lp:laboratory_procedure)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids) 
            OR (f.file_name IN $file_names)
        RETURN  {
            numberOfPrograms: COUNT(DISTINCT p),
            numberOfStudies: COUNT(DISTINCT s),
            numberOfSubjects: COUNT(DISTINCT ss),
            numberOfLabProcedures: COUNT(DISTINCT lp),
            numberOfSamples: COUNT(DISTINCT samp),
            numberOfFiles: COUNT(DISTINCT f)
        }
    """, passThrough:true)

    armsByProgramsFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): [ProgramArms] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<--(s:study)<--(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        WITH COUNT(DISTINCT ss) as caseSize
        MATCH (p:program)<--(s:study)
        OPTIONAL MATCH (s)<--(ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids)
            OR (f.file_name IN $file_names)
        WITH p, caseSize, {arm: s.study_acronym, caseSize: COUNT(DISTINCT ss), size: COUNT(DISTINCT ss)} AS studies
        RETURN {
            program: p.program_acronym,
            caseSize: caseSize,
            children: COLLECT(studies) 
        }
    """, passThrough: true)

    findIdsFromLists(subject_ids: [String] = [], sample_ids: [String] = [], file_ids: [String] = [], file_names: [String] = []): IdsLists @cypher(statement: """
        OPTIONAL MATCH (ss:study_subject)<--(samp:sample)<--(f:file)
            WHERE (ss.study_subject_id IN $subject_ids)
            OR (samp.sample_id IN $sample_ids)
            OR (f.file_id IN $file_ids) 
            OR (f.file_name IN $file_names)
        WITH 
            COLLECT(DISTINCT ss.study_subject_id) AS subject_ids,
            COLLECT(DISTINCT samp.sample_id) AS sample_ids,
            COLLECT(DISTINCT f.file_id) AS file_ids,
            COLLECT(DISTINCT f.file_name) AS file_names
        RETURN{
            subjectIds: subject_ids,
            sampleIds: sample_ids,
            fileIds: file_ids,
            fileNames: file_names
        } 
    """, passThrough: true)

    subjectsInList(subject_ids: [String]=[]): [SubjectInfo] @cypher(statement: """
        MATCH (ss:study_subject)
          WHERE ss.study_subject_id IN $subject_ids
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN  {
            program: p.program_acronym,
            program_id: p.program_id,
            study_acronym: s.study_acronym,
            subject_id: ss.study_subject_id,
            diagnosis: ss.disease_subtype,
            recurrence_score: sf.grouped_recurrence_score,
            tumor_size: d.tumor_size_group,
            er_status: d.er_status,
            pr_status: d.pr_status,
            age_at_index: demo.age_at_index,
            survival_time: demo.survival_time,
            survival_time_unit: demo.survival_time_unit
        }
    """, passThrough: true)

    filesOfSubjects(subject_ids: [String]=[]): [FileInfo] @cypher(statement:"""
        MATCH (ss:study_subject)
          WHERE ss.study_subject_id IN $subject_ids
        OPTIONAL MATCH (ss)<-[*..3]-(f:file)
        OPTIONAL MATCH (parent)<--(f)
          WHERE NOT (parent:laboratory_procedure)
        RETURN {
            subject_id: ss.study_subject_id,
            file_name: f.file_name,
            file_type: f.file_type,
            association: head(labels(parent)),
            file_description: f.file_description,
            file_format: f.file_format,
            file_size: f.file_size,
            file_id: f.file_id,
            md5sum: f.md5sum
        }
    """, passThrough: true)

    samplesForSubjectId(subject_id: String!): [sample] @cypher(statement: "MATCH (ss:study_subject {study_subject_id: $subject_id})<-[*]-(s:sample) RETURN s")

    fileIdsFromFileName(file_name: [String], order_by: String ="file_name"): [FileOverview] @cypher(statement: """
        MATCH (f:file)
        WHERE ($file_name IS NULL OR f.file_name IN $file_name)
        RETURN {
            file_name: f.file_name,
            file_id: f.file_id
        }
        ORDER BY CASE $order_by
            WHEN 'file_name' THEN f.file_name
            WHEN 'file_id' THEN f.file_id
            ELSE f.file_name END
    """, passThrough: true)

    fileIdsFromFileNameDesc(file_name: [String], order_by: String ="file_name"): [FileOverview] @cypher(statement: """
        MATCH (f:file)
        WHERE ($file_name IS NULL OR f.file_name IN $file_name)
        RETURN {
            file_name: f.file_name,
            file_id: f.file_id
        }
        ORDER BY CASE $order_by
            WHEN 'file_name' THEN f.file_name
            WHEN 'file_id' THEN f.file_id
            ELSE f.file_name END DESC
    """, passThrough: true)

    subjectList: [GroupList] @cypher(statement: """
    MATCH (ss:study_subject)
    RETURN
    {group: 'all', subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByProgram: [GroupList] @cypher(statement: """
    MATCH (p:program)
    OPTIONAL MATCH (p)<--(s:study)<--(ss:study_subject)
    RETURN
    {group: 'program:'+p.program_acronym, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByStudy: [GroupList] @cypher(statement: """
    MATCH (s:study)
    OPTIONAL MATCH (s)<-[:study_subject_of_study]-(ss:study_subject)
    RETURN
    {group: 'study:'+s.study_acronym + ': ' + s.study_short_description, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByDiagnoses: [GroupList] @cypher(statement: """
    MATCH (ss:study_subject)
    RETURN
    {group: 'diagnosis:'+ss.disease_subtype, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByRecurrenceScore: [GroupList] @cypher(statement: """
    MATCH (g:stratification_factor)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {group: 'recurrence score:'+g.grouped_recurrence_score, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByTumorSize: [GroupList] @cypher(statement: """
    MATCH (g:diagnosis)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {group: 'tumor size:'+g.tumor_size_group, subjects: collect(DISTINCT ss.study_subject_id)}
    """)

    subjectListByTumorGrade: [GroupList] @cypher(statement: """
    MATCH (g:diagnosis)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'tumor grade:'+g.tumor_grade,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByErStatus: [GroupList] @cypher(statement: """
    MATCH (g:diagnosis)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'er status:'+g.er_status,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByPrStatus: [GroupList] @cypher(statement: """
    MATCH (g:diagnosis)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'pr status:'+g.pr_status,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByChemotherapyRegimen: [GroupList] @cypher(statement: """
    MATCH (g:therapeutic_procedure)
    OPTIONAL MATCH (g)-->()-->(ss:study_subject)
    RETURN
    {
        group: 'chemotherapy regimen:'+g.chemotherapy_regimen,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByEndocrineTherapy: [GroupList] @cypher(statement: """
    MATCH (g:therapeutic_procedure)
    OPTIONAL MATCH (g)-->()-->(ss:study_subject)
    RETURN
    {
        group: 'endocrine therapy:'+g.endocrine_therapy_type,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByMenopauseStatus: [GroupList] @cypher(statement: """
    MATCH (g:demographic_data)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'menopause status:'+g.menopause_status,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByTissueType: [GroupList] @cypher(statement: """
    MATCH (g:sample)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'tissue type:'+g.tissue_type,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByTissueComposition: [GroupList] @cypher(statement: """
    MATCH (g:sample)
    OPTIONAL MATCH (g)-->(ss:study_subject)
    RETURN
    {
        group: 'sample:'+g.composition,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByFileAssociation: [GroupList] @cypher(statement: """
    MATCH (g:file)
    OPTIONAL MATCH (g)-->(parent)-->(ss:study_subject)
    RETURN
    {
        group: 'file association:'+head(labels(parent)),
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

    subjectListByFileType: [GroupList] @cypher(statement: """
    MATCH (g:file)
    OPTIONAL MATCH (g)-->(parent)-->(ss:study_subject)
    RETURN
    {
        group: 'file type:'+g.file_type,
        subjects: collect(DISTINCT ss.study_subject_id)
    }
    """)

}
